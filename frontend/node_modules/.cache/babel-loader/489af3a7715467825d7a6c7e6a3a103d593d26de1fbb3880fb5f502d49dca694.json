{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\enest\\\\IdeaProjects\\\\tupalle\\\\src\\\\hooks\\\\useAuth.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authApi } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n  const checkAuthStatus = async () => {\n    try {\n      const response = await authApi.getCurrentUser();\n      if (response.success && response.username) {\n        setUser(response.username);\n      }\n    } catch (error) {\n      console.error('Auth check failed:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const login = async (username, password) => {\n    try {\n      console.log('Attempting login for user:', username);\n      const response = await authApi.login({\n        username,\n        password\n      });\n      if (response.success) {\n        setUser(response.username);\n        return {\n          success: true,\n          message: 'Login successful'\n        };\n      }\n      return {\n        success: false,\n        message: response.message || 'Login failed'\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || 'Network error - is the backend running?';\n      console.error('Login failed:', errorMessage, error);\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n  const register = async (username, password) => {\n    try {\n      console.log('Attempting registration for user:', username);\n      const response = await authApi.register({\n        username,\n        password\n      });\n      if (response.success) {\n        setUser(response.username);\n        return {\n          success: true,\n          message: 'Registration successful'\n        };\n      }\n      return {\n        success: false,\n        message: response.message || 'Registration failed'\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message || 'Network error - is the backend running?';\n      console.error('Registration failed:', errorMessage, error);\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      await authApi.logout();\n    } catch (error) {\n      console.error('Logout failed:', error);\n    } finally {\n      setUser(null);\n    }\n  };\n  const value = {\n    user,\n    isAuthenticated: !!user,\n    isLoading,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"YajQB7LURzRD+QP5gw0+K2TZIWA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authApi","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","isLoading","setIsLoading","checkAuthStatus","response","getCurrentUser","success","username","error","console","login","password","log","message","_error$response","_error$response$data","errorMessage","data","register","_error$response2","_error$response2$data","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/enest/IdeaProjects/tupalle/src/hooks/useAuth.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { authApi } from '../services/api';\r\nimport { AuthResponse } from '../types';\r\n\r\ninterface AuthContextType {\r\n  user: string | null;\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n  login: (username: string, password: string) => Promise<{ success: boolean; message: string }>;\r\n  register: (username: string, password: string) => Promise<{ success: boolean; message: string }>;\r\n  logout: () => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<string | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  const checkAuthStatus = async () => {\r\n    try {\r\n      const response = await authApi.getCurrentUser();\r\n      if (response.success && response.username) {\r\n        setUser(response.username);\r\n      }\r\n    } catch (error) {\r\n      console.error('Auth check failed:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (username: string, password: string): Promise<{ success: boolean; message: string }> => {\r\n    try {\r\n      console.log('Attempting login for user:', username);\r\n      const response = await authApi.login({ username, password });\r\n      if (response.success) {\r\n        setUser(response.username);\r\n        return { success: true, message: 'Login successful' };\r\n      }\r\n      return { success: false, message: response.message || 'Login failed' };\r\n    } catch (error: any) {\r\n      const errorMessage = error.response?.data?.message || error.message || 'Network error - is the backend running?';\r\n      console.error('Login failed:', errorMessage, error);\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  const register = async (username: string, password: string): Promise<{ success: boolean; message: string }> => {\r\n    try {\r\n      console.log('Attempting registration for user:', username);\r\n      const response = await authApi.register({ username, password });\r\n      if (response.success) {\r\n        setUser(response.username);\r\n        return { success: true, message: 'Registration successful' };\r\n      }\r\n      return { success: false, message: response.message || 'Registration failed' };\r\n    } catch (error: any) {\r\n      const errorMessage = error.response?.data?.message || error.message || 'Network error - is the backend running?';\r\n      console.error('Registration failed:', errorMessage, error);\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await authApi.logout();\r\n    } catch (error) {\r\n      console.error('Logout failed:', error);\r\n    } finally {\r\n      setUser(null);\r\n    }\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    isAuthenticated: !!user,\r\n    isLoading,\r\n    login,\r\n    register,\r\n    logout,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}